int getPairsCount(int arr[], int n, int k) {
         unordered_map<int, int> m; 
  
    // Store counts of all elements in map m 
    for (int i=0; i<n; i++) 
        m[arr[i]]++; 
  
    int twice_count = 0; 
  
    // iterate through each element and increment the 
    // count (Notice that every pair is counted twice) 
    for (int i=0; i<n; i++) 
    { 
        twice_count += m[k-arr[i]]; 
  
        // if (arr[i], arr[i]) pair satisfies the condition, 
        // then we need to ensure that the count is 
        // decreased by one such that the (arr[i], arr[i]) 
        // pair is not considered 
        if (k-arr[i] == arr[i]) 
            twice_count--; 
    } 
  
    // return the half of twice_count 
    return twice_count/2; 
    }
// little less optimal solution
sorting array then having two counters i=0, j=n-1
iterate over loop 
if (a[i]+a[j]==k)
count++;
else(a[i]+a[j]<k)
i++;
else
j--;

// Given an array A[] and a number x, check for pair in A[] with sum as x
hashing-
// C++ program to check if given array
// has 2 elements whose sum is equal
// to the given value
#include <bits/stdc++.h>

using namespace std;

void printPairs(int arr[], int arr_size, int sum)
{
	unordered_set<int> s;
	for (int i = 0; i < arr_size; i++) 
	{
		int temp = sum - arr[i];

		if (s.find(temp) != s.end())   //: find() returns an iterator to the element if found, else returns an iterator pointing to the end of unordered_set.
			cout << "Pair with given sum "
				<< sum << " is (
						" << arr[i] << ",
				" 
					<< temp << ")" << endl;

		s.insert(arr[i]);
	}
}

/* Driver Code */
int main()
{
	int A[] = { 1, 4, 45, 6, 10, 8 };
	int n = 16;
	int arr_size = sizeof(A) / sizeof(A[0]);

	// Function calling
	printPairs(A, arr_size, n);

	return 0;
}

//
