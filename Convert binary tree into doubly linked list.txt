static Node* prev = NULL; 
void BinaryTree2DoubleLinkedList(Node *root, Node **head) 
{
// Base case 
    if (root == NULL) return; 
  
    // Initialize previously visited node as NULL. This is 
    // static so that the same value is accessible in all recursive 
    // calls 
  
    // Recursively convert left subtree 
    BinaryTree2DoubleLinkedList(root->left, head); 
  
    // Now convert this node 
    if (::prev == NULL) 
        *head = root; 
    else
    { 
        root->left = ::prev; 
        ::prev->right = root; 
    } 
    ::prev = root; 
  
    // Finally convert right subtree 
    BinaryTree2DoubleLinkedList(root->right, head); 
}
void BToDLL(Node *root, Node **head_ref)
{
    if(root==NULL)return;
    BToDLL(root->right,head_ref);
    root->right=*head_ref;
    if(*head_ref)(*head_ref)->left=root;
    *head_ref=root;
    BToDLL(root->left,head_ref);
}
Node * bToDLL(Node *root)
{   
    if(!root)
    return NULL;
    ::prev=NULL;
    Node*head=NULL;
    BinaryTree2DoubleLinkedList(root,&head);
    return head;
}

